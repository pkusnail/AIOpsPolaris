version: '3.8'

services:
  # MySQL数据库 - 存储用户会话和系统配置
  mysql:
    image: mysql:8.0
    container_name: aiops-mysql
    environment:
      MYSQL_ROOT_PASSWORD: aiops123
      MYSQL_DATABASE: aiops
      MYSQL_USER: aiops_user
      MYSQL_PASSWORD: aiops_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - aiops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Neo4j图数据库 - 知识图谱存储
  neo4j:
    image: neo4j:5.15
    container_name: aiops-neo4j
    environment:
      NEO4J_AUTH: neo4j/aiops123
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - aiops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "aiops123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Weaviate向量数据库 - 语义搜索
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: aiops-weaviate
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - aiops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存 - 会话缓存和任务队列
  redis:
    image: redis:7.2-alpine
    container_name: aiops-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass aiops123
    volumes:
      - redis_data:/data
    networks:
      - aiops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # vLLM服务 - LLM推理服务
  vllm:
    image: vllm/vllm-openai:latest
    container_name: aiops-vllm
    ports:
      - "8000:8000"
    environment:
      VLLM_MODEL: "Qwen/Qwen2-7B-Instruct"
      VLLM_GPU_MEMORY_UTILIZATION: "0.8"
      VLLM_MAX_MODEL_LEN: "4096"
    volumes:
      - huggingface_cache:/root/.cache/huggingface
    networks:
      - aiops-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # API服务 - FastAPI应用
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: aiops-api
    ports:
      - "8888:8000"
    environment:
      - DATABASE_URL=mysql+aiomysql://aiops_user:aiops_pass@mysql:3306/aiops
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=aiops123
      - WEAVIATE_URL=http://weaviate:8080
      - REDIS_URL=redis://:aiops123@redis:6379/0
      - VLLM_API_BASE=http://vllm:8000/v1
      - PYTHONPATH=/app
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - aiops-network
    depends_on:
      mysql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      weaviate:
        condition: service_healthy
      redis:
        condition: service_healthy
      vllm:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: aiops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aiops-network
    restart: unless-stopped

  # Grafana仪表盘
  grafana:
    image: grafana/grafana:latest
    container_name: aiops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=aiops123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - aiops-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: aiops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/ssl/certs
    networks:
      - aiops-network
    depends_on:
      - api
      - grafana
    restart: unless-stopped

volumes:
  mysql_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  weaviate_data:
  redis_data:
  prometheus_data:
  grafana_data:
  huggingface_cache:

networks:
  aiops-network:
    driver: bridge